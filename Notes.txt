html-boilerplate

        <!-- I am a comment -->
        <!-- 
            You can create multi-line comments
            Such as this one
            A shortcut to creating comments for Windows is Ctrl + /
         -->

        <!-- 
            ul stands for unordered list
            li stands for list item -->

        <!-- unordered list means that the order must not matter -->
        <!-- ordered list; order matters -->

odin-links-and-images

<!--
    Links are created using the anchor element, which is represented by the a tag
    The a tag has an href attribute which specifies the destination of the link
    -->
<!-- 
    HTML attribute examples are: lang="en" and href="www.facebook.com"
    An attribute is usually made up of two parts: a name, and a value
    However, not all attributes require a value 

    href attribute — stands for hypertext reference attribute
    The value of the href attribute is the destination we want our link to go to
    -->

<!--
    There are two types of links: absolute and relative

    Absolute links to a different website
    Absolute links include the scheme and domain e.g. https://www.theodinproject.com/about

    Relative links to a different page within the present website
    Relative links only include the file path to the other page e.g. about.html
    -->

<!-- 
    To attach images, you can use the img element
    The img is a void element which means it doesn't have a closing tag
    It has a src attribute
    It can also have an alt attribute which stands for alternative text; used to describe the attached image. It will be used in place of the image if it cannot be loaded.
    It is a good habit to specify the width and height attributes to help the browser layout the page without causing the page to jump and flash
    -->

Sep 4, 2025 09:12
https://www.theodinproject.com/lessons/foundations-intro-to-css

CSS is made up of various rules. 
Each rule is made up of a selector and a semicolon-separated list of declarations.
Each declaration is made up of a property-value pair.

    div.bold-text {
        font-weight: 700;
    }

    div.bold-text 	> selector
    font-weight 	> property
    700		        > value

A div element is one of the basic HMTL elements
It is simply an empty container

Selectors refer to the HTML elements to which CSS rules apply.

<!-- index.html -->

    <div>Hello, World!</div>
    <p>Hi...</p>
    <div>Okay, bye.</div>
    <div class="alert-text">Please agree to our terms of service.</div>

Universal selector — selects elements of every type; asterisk (*)
Type selectors — selects elements of the given element type; name of element type (div)
Class selectors — selects elements of the given class; period + name of class (.alert-text)
ID selectors — selects elements of the give ID; hashtag + name of ID (#title)

Notes: 
You can use the same class on as many elements as you want
Class selectors won't work if the class name begins with a number
You are able to add multiple classes to a single element as a space-separated list; class="alert-text severe-alert"
Major difference between classes and IDs is that an element can only have one ID
IDs cannot be repeated on a single page and should not contain any whitespace
ID selectors won't work if the class name begins with a number
Selectors can be grouped together as a comma-separated list to cut down on the repetition

You can do it like the following:

    .read,
    .unread {
    color: white;
    background-color: black;
    }

    .read {
    /* several unique declarations */
    }

    .unread {
    /* several unique declarations */
    }

Chaining selectors

Class selectors

    .subsection.header {
    color: red;
    }


Class and ID

    .subsection#preview {
    color: blue;
    }

Descendant combinators

    .ancestor .contents {
    /* some declarations */
    }

Color property — sets the text color of an element
Background-color — sets the background color of an element
Both properties accept keywords, HEX, RGB, and HSL values.

    p {
    /* keyword example: */
    color: red;
    }

    p {
    /* hex example: */
    color: #1100ff;
    }

    p {
    /* rgb example: */
    color: rgb(100, 0, 127);
    }

    p {
    /* hsl example: */
    color: hsl(15, 82%, 56%);
    }
________________________________
TYPOGRAPHY BASICS AND TEXT-ALIGN
https://www.theodinproject.com/lessons/foundations-intro-to-css#typography-basics-and-text-align

Font-family 
> can be a single value
> can be a comma-separated list of values
> determines what font an element uses
______________________
IMAGE HEIGHT AND WIDTH
https://www.theodinproject.com/lessons/foundations-intro-to-css#image-height-and-width

If you wanted to adjust the size of the image without causing it to lose its proportions, you would use a value of “auto” for the height property and adjust the width value.

___________________________________
THREE METHODS OF ADDING CSS TO HTML
https://www.theodinproject.com/lessons/foundations-intro-to-css#adding-css-to-html
1. External CSS
2. Internal or embedded CSS
3. Inline CSS

__________
ASSIGNMENT
01-css-methods
02-class-id-selectors
03-grouping-selectors
04-chaining-selectors
05-descendant-combinator

September 5, 2025 14:36
The Cascade
https://www.theodinproject.com/lessons/foundations-the-cascade
https://www.youtube.com/watch?v=_Q8Ih2SW-TE&pp=2AbXJg%3D%3D


The cascade is what determines which rules actually get applied to our HTML
There are different factors that the cascade uses to determine this
We will examine three of these factors

A CSS declaration that is more specific will take precedence over less specific ones
Take precedence – means it will have more importance/priority

Inline styles have the highest specificity compared to selectors
While each type of selector has its own specificity level that contributes to how specific a declaration is
Other selectors contribute to specificity, but we’re focusing only on the ones we’ve gone over so far

1. ID selectors (most specific selector)
2. Class selectors
3. Type selectors

Specificity will only be taken into account when an element has multiple, conflicting declarations targeting it

An ID selector will always beat any number of class selectors
A class selector will always beat any number of type selectors
A type selector will always beat any number of less specific selectors

A class is more specific than an element
An ID is more specific than a class
An inline style is more specific than an ID

When there is no declaration with a selector of higher specificity, a rule with a greater number of selectors of the same type will take precedence over another rule with fewer selectors of the same type.

MORE SELECTORS == MORE SPECIFIC

Libog na diri: https://www.theodinproject.com/lessons/foundations-the-cascade#not-everything-adds-to-specificity

The universal selector (*) has no specificity value

There is an override command called !important that could prioritize the chosen element over everything elements

p {
    color: green !important;
}

Sep 6 2025 22:12
https://www.youtube.com/watch?v=MDR5GmurmVA&list=RDMDR5GmurmVA&start_radio=1

Sep 7 2025 09:46
Started exploring Gooogle Chrome DevTools
https://developer.chrome.com/docs/devtools/css

The Box Model
https://www.theodinproject.com/lessons/foundations-the-box-model

Every single thing on a webpage is a rectangular box. 
These boxes can have other boxes in them 
These boxes can sit alongside one another

Every single element in CSS is a box! Remember that!

Every element is basically a box, The Box Model consists of the following:
1. Content 
2. Padding
3. Border
4. Margin -> https://css-tricks.com/almanac/properties/m/margin/

The box-sizing property in CSS can only have two values: 
    box-sizing: content-box;            width set by the user applies to the size of the content only
    box-sizing: border-box;             width set by the user applies to the size of the whole box

Block vs. Inline Elements
https://www.w3schools.com/html/html_blocks.asp
CSS has two box types: 
    1. block
    2. inline

The display property controls how HTML elements appear on the webpage.

Sep 9 2025 10:04

https://www.freecodecamp.org/news/how-to-use-css-overview-in-chrome-developer-tools/
There is a feature on Google Chrome called "CSS Overview"

To access it, follow these steps:
1. Ctrl + Shift + I
2. Three vertical dots on the upper-right side
3. More tools
4. CSS Overview
5. Capture Overview

There is a shortcut for padding. Shown as follows:

.content {
  padding: 16px 8px;
}

        first value = top and bottom  
        second value = left and right

https://www.theodinproject.com/lessons/foundations-introduction-to-flexbox

> Flexbox is a way to arrange items into rows or columns.
> A flex container is any element that has display: flex on it.
> A flex item is any element that lives directly inside of a flex container.
> An element can be both a flex container and a flex item
> Nesting multiple flex containers and items is the way to do this
> Flexbox is a very powerful tool.
> Flexbox is a whole module and not just a single property!

More about Flexbox!
https://internetingishard.netlify.app/html-and-css/flexbox/index.html
https://www.youtube.com/watch?v=phWxA89Dy94


https://www.theodinproject.com/lessons/foundations-growing-and-shrinking
The flex shorthand!
"flex" is actually a shorthand for:
    > flex-grow         sets how much of the space will be distributed when screen is resized to be bigger; relative to other elements which also acquire this property
    > flex-shrink       sets how much of the space will be distributed when screen is resized to be smaller; relative to other elements which also acquire this property
    > flex-basis        sets the base width of the element
https://scrimba.com/learn-flexbox-c0k/~09

Note: I suck at reading, I prefer watching video tutorials than reading and comprehending it all.

https://www.theodinproject.com/lessons/foundations-axes
A flex container has two axes: row and column.
    row        = horizontal (default)
    column     = vertical

There are many properties a flexbox can have.

.flex-container {
  flex-direction: column;
}

Your flex-containers will always have two axes: 
These axes change relative to the flex-direction
    flex-direction: row
        main axis       horizontal      left-to-right
        cross axis      vertical        top-to-bottom
    flex-direction: column
        main axis       vertical        top-to-bottom
        cross axis      horizontal      left-to-right
https://flexbox.malven.co/
https://scrimba.com/learn-flexbox-c0k/~01
https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/
https://css-tricks.com/snippets/css/a-guide-to-flexbox/

Sep 10 2025 10:06
https://www.theodinproject.com/lessons/foundations-alignment
    > justify-content aligns items across the main axis
    > align-items aligns items along the cross axis 

    gap on a flex container adds a specified space between flex items, similar to adding a margin to the items themselves

    Note: justify-content and align-items are relative to the flex-direction property.

Sep 11 2025 15:00
justify-content is a property for the flex container! 
Please don't put it on a flex-item!!!   

Useful properties for lists
> list-style: none; removes bullets
> margin: 0; removes default margin
> padding: 0; removes default padding
> text-decoration: none; removes underline; must be put under <a> tag

Sep 12 2025 20:54

JavaScript is to make the webpage interactive!

— All JavaScript of the Foundations course will be run via the browser.
— Later lessons will show you how to run JavaScript outside of the browser environment.
— The simplest way to get started is to create an HTML file with the JavaScript code inside of it. 

Include the following code in your HTML body:
  <script>
    // Your JavaScript goes here!
    console.log("Hello, World!")
  </script>

console.log() is the command to print something to the developer console in your browser.

Another way to include JavaScript in a webpage is through an external script. 
This is very similar to linking external CSS docs to your website.
    <script src="javascript.js"></script>

Note: External JavaScript files are used for more complex scripts.

VARIABLES
-> are the building blocks of any program
-> you can think of variables as "storage containers" for data
-> declare variables using the keyword "let", e.g.:

    let name = "John";
    let surname = "Doe";

    console.log(name);
    console.log(surname);

Variables declared with 'let' are mutable.

2 Type of Variables
Mutable – are those that can be changed after they are created; the value or state of the variable can be modified without creating a new variable
Immutable – opposite of mutable variables

let     – Mutable; can be re-assigned
const   – Immutable; cannot be re-assigned
var     – similar to let; not used anymore but you may encounter in the future
Sep 15 2025 19:34
2 ways to attach a javascript file onto your HTML

First Method
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>I am TIRED</title>
    <script src="script.js"></script>
</head>

Second Method
<body>       
    <script>
        console.log("Hello World!")
    </script>
</body>

Sep 16 2025 09:07
Numbers are the building block sof programming logic!
It is hard to think of any useful programming task that doesn't involve at least a little basic math.

https://www.theodinproject.com/lessons/foundations-variables-and-operators
https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/What_is_JavaScript
https://javascript.info/variables#variable-naming
https://www.w3schools.com/js/js_numbers.asp

Infinity is a special value that's greater than any number
You may get it by logging 1 / 0 as follows

console.log(1 / 0) // Why is this?

NaN represents a computational error. 
It is a result of an incorrect or an undefined mathematical operation,
For example:

alert( "not a number" / 2 ); // NaN, such division is erroneous

In JavaScript, there are 3 types of quotes.

Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`.

Double and single quotes are “simple” quotes. 
There’s practically no difference between them in JavaScript.

Backticks are “extended functionality” quotes. 
They allow us to embed variables and expressions into a string by wrapping them in ${…}.

For example:
    let name = "John";
    alert( `Hello, ${name}!` ); // Hello, John!
    alert( `the result is ${1 + 2}` ); // the result is 3
 
 null is a special value which represents “nothing”, “empty” or “value unknown”.
 The meaning of undefined is “value is not assigned”.

For example:
    let age;
    alert(age); // shows "undefined"
    
Sep 17 2025 14:42

strings in JavaScript

JavaScript offers many features for manipulating strings.
We declare a string by entering the following:
    const variableName = "The revolution will not be televised!";
    console.log(variableName);

You are free to choose whether to use:
    single quotes ('), 
    double quotes ("), 
    or backticks (`) to wrap your strings in.

Embedding JavaScript
> You can wrap JavaScript variables or expressions inside a template literal ${}

For example:
    const name = "Chris";
    const greeting = `Hello, ${name}!`;
    console.log(greeting);

You can use the same technique to combine two variables as follows
    const one = "Hello, ";
    const two = "how are you?";
    const joined = `${one}${two}`;
    console.log(joined);

Notes: 
> You can use ${} only with template literals, not normal strings. 
> You can concatenate normal strings using the + operator
> You can include JavaScript expressions in template literals
    const song = "Fight Song by Rachel Platten";
    const score = 9;
    const highestScore = 10;
    const output = `I like the song ${song}. I gave it a score of ${(score / highestScore) * 100}%.`
    console.log(output)

> Template literals respect the line breaks in the source code, so you can write strings that span multiple lines as follows
    const text = `One day, I am going to be free
    from everything I see.`
    console.log(text)

> To create a new line using a normal string, use the escape sequence \n
    const text = `One day, I am going to be free\nfrom everything I see.`
    console.log(text)

> To include actual quotes
    1. Use different characters to declare the string   
        const quote = `She said "I'm not going in there!"`;
    2. Escaping characters
        const bigmouth = 'I\'ve got no right to take my place…';

> Converting a numeric value to a string variable and vice versa
    Use the Number() function 
        const myString = "123";
        const myNum = Number(myString);
        console.log(typeof myNum)
    Use the String() function
        const thisIsANumber = "123";
        const thisIsAString = String(thisIsANumber);
        console.log(typeof thisIsAString)

JavaScript String Methods
> https://www.w3schools.com/js/js_string_methods.asp
> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

Sep 18 2025 10:08
String Primitives & String Objects 
    const string1 = "A string primitive";
    const string2 = 'Also a string primitive';
    const string3 = `Yet another string primitive`;
    const string4 = new String("A String object");

https://javascript.info/comparison // I like this website; very comprehensive
> All comparison operators return a boolean value.
> A comparison result can  be assigned to a variable, just like any value
> JavaScript uses the dictionary or lexicographical order; strings are compared letter by letter
    alert( 'Z' > 'A' ); // true
    alert( 'Glow' > 'Glee' ); // true
    alert( 'Bee' > 'Be' ); // true

The algorithm to compare two strings is simple:
    1. Compare the first character of both strings.
    2. If the first character from the first string is greater (or less) than the other string’s, then the first string is greater (or less) than the second. We’re done.
    3. Otherwise, if both strings’ first characters are the same, compare the second characters the same way.
    4. Repeat until the end of either string.
    5. If both strings end at the same length, then they are equal. Otherwise, the longer string is greater.

Conditionals
https://www.w3schools.com/js/js_if_else.asp

You want to perform different actions for different decisions.
You can use conditional statements in your code to do this.
> if
> else 
> else if 
> switch

Note: Conditional statements are case-sensitive.

Logical Operators   
https://javascript.info/logical-operators
    1. OR                       ||
    2. AND                      &&
    3. NOT                      !   
    4. Nullish Coalescing       ??

Truthy and Falsy Values in JavaScript

Sep 28 2025 12:07
https://www.theodinproject.com/lessons/foundations-data-types-and-conditionals
Assignment – 02_addNumbers
The plain javascript file is where you'll write your code
The `spec` file contains the tests that verify your code is functional
Run the test by entering into the terminal >> `npm test specFileName.spec.js`

The following code can be found in a spec file:
    const addNumbers = require('./addNumbers')

    describe('addNumbers', () => {
    test('adds the numbers together', () => {
        expect(addNumbers()).toEqual(2);
    });
    });

`require()` imports the code from the javascript file (`helloWorld.js`) so that we can test it
`describe()` is the body of the test, basically, all it's doing is running your code and testing to see if the output is correct
`test()` function describes what should be happening in plain english
`expect()` function is included in the test function

16:24

Opening Chrome DevTools
1. Chrome Menu > More Tools > Developer Tools
2. Right-click anywhere on a webpage > Inspect
3. F12
4. Ctrl + Shift + C (directly opens console)

Ctrl + Shift + C (can also be used to select an element)

Sep 30 2025
Device Mode in Chrome DevTools
https://developer.chrome.com/docs/devtools/device-mode/

> Ctrl + Shift + M
> Toggle device toolbar on the upper left side of the Chrome DevTools page

console.log()
console.error()
console.warn()
console.clear()

> console sidebar toggle is located on the upper left side below the Select an element toggle

14:00
There are parameter and arguments inside of a function.

Parameters are the items listed between the parentheses in the function declaration.
Function arguments are the actual values we decide to pass to the function.
Look at this example:
    function favoriteAnimal(animal) {
        return animal + " is my favorite animal!"
    }

    console.log(favoriteAnimal('Goat'))

> animal is the parameter
> Goat is the argument

We are telling JavaScript that we will send some value to our favoriteAnimal function by putting animal inside the parentheses of the favoriteAnimal() function.
Note: animal is just a placeholder for some future value. 
The last line, favoriteAnimal('Goat'), calls our favoriteAnimal function and passes the value 'Goat' inside that function. 
'Goat' is our argument. 
We are telling the favoriteAnimal function, “Please send 'Goat' to the favoriteAnimal function and use 'Goat' wherever the ‘animal’ placeholder is.” 
Because of the flexibility that using a parameter provides, we can declare any animal to be our favorite.

Make note of the fact that by calling favoriteAnimal() inside of console.log() with the argument 'Goat' we get the return value of the function, string of "Goat is my favorite animal!", printed to the console. 
We’re passing in a function call favoriteAnimal('Goat') as an argument in a different function call - log().
Keep this possibility in mind because you’ll be passing in function calls as arguments somewhat often. 
If we just called the function without using console.log to print it’s return value, nothing would appear in the console but nonetheless the function would return that string.

Functions
https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Functions
https://javascript.info/function-basics

> functions are the main “building blocks” of the program
> allow you to store a piece of code that does a single task inside a defined block
> you are able to call that piece of code whenever you need it using a single short command;
> rather than having to type out the same code multiple times
> there are built-in functions; we can create them as well

Pretty much anytime you make use of a JavaScript structure that features a pair of parentheses — () — 
    and you're not using a common built-in language structure like a for loop, while or do...while loop, or if...else statement, 
    you are making use of a function.

Scope
> when you create a function, the variables and other things defined inside the function are inside their own separate scope
> meaning that they are locked away in their own separate compartments, unreachable from code outside the functions

Global Scope
> the level outside your function is called the global scope
> values defined in the global scope are accessible from everywhere in the code
> you can't declare the same constant twice in the same scope

Return Values
> the values that a function returns when it completes
> some functions do not retun a significant value
> but others do

Understand
> what their values are
> how to use them in your code
> how to make functions return useful values

Three Ways to Create a Function
Function Declaration vs Function Expression

Declaration
    function sayHi() {
    alert( "Hello" );
    }

Expression
    let sayHi = function() {
    alert( "Hello" );
    };

Arrow Functions
    let func = (arg1, arg2, ..., argN) => expression;


Oct 1 2025 07:48
https://javascript.info/arrow-functions-basics
Arrow Functions
> a concise way to write function expressions
> creates a function func that accepts arguments arg1..argN
> then evaluates the expression on the right side with their use and 
> returns its result
> for simple functions that are only used once

let func = (arg1, arg2, ..., argN) => expression; 

The code above is the shorter version of the code below

    let func = function(arg1, arg2, ..., argN) {
    return expression;
    };

A concrete example:

    let sum = (a, b) => a + b;

    /* 
    This arrow function is a shorter form of:
    let sum = function(a, b) {
    return a + b;
    };
    */

    alert( sum(1, 2) ); // 3

Oct 3 2025